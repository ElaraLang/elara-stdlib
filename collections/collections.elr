namespace elara/std

let forEach(Any[] col, (Any) => Unit fun) => {
	forEachIndexed(col, (Int index, Any value) => {
		fun(value)
	})
}

let forEachIndexed(Any[] col, (Int, Any) => Unit fun) => {
    loopIndexed(col.size, (Int index) => {
        fun(index, col[index])
    })
}

let toString(Any[] col) => {
	return "[" + col.join(", ") + "]"
}

let map(Any[] col, (Any) => Any mapper) => {
	if col.size == 0 {
		return empty()
	}
	return mapRec(col, 0, mapper)
}

let mapRec(Any[] col, Int index, (Any) => Any mapper) => {
	if index == col.size {
		return empty()
	}
	let mappedElem = mapper(col[index])
	return [mappedElem] + mapRec(col, index + 1, mapper)
}

let filter(Any[] col, (Any) => Boolean predicate) => {
	return filterRec(col, 0, predicate)
}

let filterRec(Any[] col, Int index, (Any) => Boolean predicate) => {
	if index == col.size {
		return empty()
	}
	let passes = predicate(col[index])
	if passes {
		return [col[index]] + filterRec(col, index + 1, predicate)
	}
	return filterRec(col, index + 1, predicate)
}

let times(Any[] col, Int quantity) => {
	let mut base = col
	loop(quantity, () => {
		base = base + col
	})

	return base
}